[
  {
    "title": "Possible Errors",
    "rules": [
      {
        "name": "no-cond-assign",
        "description": "disallow assignment operators in conditional expressions"
      },
      {
        "name": "no-console",
        "description": "disallow the use of console"
      },
      {
        "name": "no-constant-condition",
        "description": "disallow constant expressions in conditions"
      },
      {
        "name": "no-control-regex",
        "description": "disallow control characters in regular expressions"
      },
      {
        "name": "no-debugger",
        "description": "disallow the use of debugger"
      },
      {
        "name": "no-dupe-args",
        "description": "disallow duplicate arguments in function definitions"
      },
      {
        "name": "no-dupe-keys",
        "description": "disallow duplicate keys in object literals"
      },
      {
        "name": "no-duplicate-case",
        "description": "disallow duplicate case labels"
      },
      {
        "name": "no-empty-character-class",
        "description": "disallow empty character classes in regular expressions"
      },
      {
        "name": "no-empty",
        "description": "disallow empty block statements"
      },
      {
        "name": "no-ex-assign",
        "description": "disallow reassigning exceptions in catch clauses"
      },
      {
        "name": "no-extra-boolean-cast",
        "description": "disallow unnecessary boolean casts"
      },
      {
        "name": "no-extra-parens",
        "description": "disallow unnecessary parentheses"
      },
      {
        "name": "no-extra-semi",
        "description": "disallow unnecessary semicolons"
      },
      {
        "name": "no-func-assign",
        "description": "disallow reassigning function declarations"
      },
      {
        "name": "no-inner-declarations",
        "description": "disallow function or var declarations in nested blocks"
      },
      {
        "name": "no-invalid-regexp",
        "description": "disallow invalid regular expression strings in RegExp constructors"
      },
      {
        "name": "no-irregular-whitespace",
        "description": "disallow irregular whitespace outside of strings and comments"
      },
      {
        "name": "no-obj-calls",
        "description": "disallow calling global object properties as functions"
      },
      {
        "name": "no-prototype-builtins",
        "description": "disallow calling some Object.prototype methods directly on objects"
      },
      {
        "name": "no-regex-spaces",
        "description": "disallow multiple spaces in regular expressions"
      },
      {
        "name": "no-sparse-arrays",
        "description": "disallow sparse arrays"
      },
      {
        "name": "no-template-curly-in-string",
        "description": "disallow template literal placeholder syntax in regular strings"
      },
      {
        "name": "no-unexpected-multiline",
        "description": "disallow confusing multiline expressions"
      },
      {
        "name": "no-unreachable",
        "description": "disallow unreachable code after return, throw, continue, and break statements"
      },
      {
        "name": "no-unsafe-finally",
        "description": "disallow control flow statements in finally blocks"
      },
      {
        "name": "no-unsafe-negation",
        "description": "disallow negating the left operand of relational operators"
      },
      {
        "name": "use-isnan",
        "description": "require calls to isNaN() when checking for NaN"
      },
      {
        "name": "valid-jsdoc",
        "description": "enforce valid JSDoc comments"
      },
      {
        "name": "valid-typeof",
        "description": "enforce comparing typeof expressions against valid strings"
      }
    ]
  },
  {
    "title": "Best Practices",
    "rules": [
      {
        "name": "accessor-pairs",
        "description": "enforce getter and setter pairs in objects"
      },
      {
        "name": "array-callback-return",
        "description": "enforce return statements in callbacks of array methods"
      },
      {
        "name": "block-scoped-var",
        "description": "enforce the use of variables within the scope they are defined"
      },
      {
        "name": "class-methods-use-this",
        "description": "enforce that class methods utilize this"
      },
      {
        "name": "complexity",
        "description": "enforce a maximum cyclomatic complexity allowed in a program"
      },
      {
        "name": "consistent-return",
        "description": "require return statements to either always or never specify values"
      },
      {
        "name": "curly",
        "description": "enforce consistent brace style for all control statements"
      },
      {
        "name": "default-case",
        "description": "require default cases in switch statements"
      },
      {
        "name": "dot-location",
        "description": "enforce consistent newlines before and after dots"
      },
      {
        "name": "dot-notation",
        "description": "enforce dot notation whenever possible"
      },
      {
        "name": "eqeqeq",
        "description": "require the use of === and !=="
      },
      {
        "name": "guard-for-in",
        "description": "require for-in loops to include an if statement"
      },
      {
        "name": "no-alert",
        "description": "disallow the use of alert, confirm, and prompt"
      },
      {
        "name": "no-caller",
        "description": "disallow the use of arguments.caller or arguments.callee"
      },
      {
        "name": "no-case-declarations",
        "description": "disallow lexical declarations in case clauses"
      },
      {
        "name": "no-div-regex",
        "description": "disallow division operators explicitly at the beginning of regular expressions"
      },
      {
        "name": "no-else-return",
        "description": "disallow else blocks after return statements in if statements"
      },
      {
        "name": "no-empty-function",
        "description": "disallow empty functions"
      },
      {
        "name": "no-empty-pattern",
        "description": "disallow empty destructuring patterns"
      },
      {
        "name": "no-eq-null",
        "description": "disallow null comparisons without type-checking operators"
      },
      {
        "name": "no-eval",
        "description": "disallow the use of eval()"
      },
      {
        "name": "no-extend-native",
        "description": "disallow extending native types"
      },
      {
        "name": "no-extra-bind",
        "description": "disallow unnecessary calls to .bind()"
      },
      {
        "name": "no-extra-label",
        "description": "disallow unnecessary labels"
      },
      {
        "name": "no-fallthrough",
        "description": "disallow fallthrough of case statements"
      },
      {
        "name": "no-floating-decimal",
        "description": "disallow leading or trailing decimal points in numeric literals"
      },
      {
        "name": "no-global-assign",
        "description": "disallow assignments to native objects or read-only global variables"
      },
      {
        "name": "no-implicit-coercion",
        "description": "disallow shorthand type conversions"
      },
      {
        "name": "no-implicit-globals",
        "description": "disallow var and named function declarations in the global scope"
      },
      {
        "name": "no-implied-eval",
        "description": "disallow the use of eval()-like methods"
      },
      {
        "name": "no-invalid-this",
        "description": "disallow this keywords outside of classes or class-like objects"
      },
      {
        "name": "no-iterator",
        "description": "disallow the use of the __iterator__ property"
      },
      {
        "name": "no-labels",
        "description": "disallow labeled statements"
      },
      {
        "name": "no-lone-blocks",
        "description": "disallow unnecessary nested blocks"
      },
      {
        "name": "no-loop-func",
        "description": "disallow function declarations and expressions inside loop statements"
      },
      {
        "name": "no-magic-numbers",
        "description": "disallow magic numbers"
      },
      {
        "name": "no-multi-spaces",
        "description": "disallow multiple spaces"
      },
      {
        "name": "no-multi-str",
        "description": "disallow multiline strings"
      },
      {
        "name": "no-new-func",
        "description": "disallow new operators with the Function object"
      },
      {
        "name": "no-new-wrappers",
        "description": "disallow new operators with the String, Number, and Boolean objects"
      },
      {
        "name": "no-new",
        "description": "disallow new operators outside of assignments or comparisons"
      },
      {
        "name": "no-octal-escape",
        "description": "disallow octal escape sequences in string literals"
      },
      {
        "name": "no-octal",
        "description": "disallow octal literals"
      },
      {
        "name": "no-param-reassign",
        "description": "disallow reassigning function parameters"
      },
      {
        "name": "no-proto",
        "description": "disallow the use of the __proto__ property"
      },
      {
        "name": "no-redeclare",
        "description": "disallow var redeclaration"
      },
      {
        "name": "no-return-assign",
        "description": "disallow assignment operators in return statements"
      },
      {
        "name": "no-script-url",
        "description": "disallow javascript: urls"
      },
      {
        "name": "no-self-assign",
        "description": "disallow assignments where both sides are exactly the same"
      },
      {
        "name": "no-self-compare",
        "description": "disallow comparisons where both sides are exactly the same"
      },
      {
        "name": "no-sequences",
        "description": "disallow comma operators"
      },
      {
        "name": "no-throw-literal",
        "description": "disallow throwing literals as exceptions"
      },
      {
        "name": "no-unmodified-loop-condition",
        "description": "disallow unmodified loop conditions"
      },
      {
        "name": "no-unused-expressions",
        "description": "disallow unused expressions"
      },
      {
        "name": "no-unused-labels",
        "description": "disallow unused labels"
      },
      {
        "name": "no-useless-call",
        "description": "disallow unnecessary calls to .call() and .apply()"
      },
      {
        "name": "no-useless-concat",
        "description": "disallow unnecessary concatenation of literals or template literals"
      },
      {
        "name": "no-useless-escape",
        "description": "disallow unnecessary escape characters"
      },
      {
        "name": "no-void",
        "description": "disallow void operators"
      },
      {
        "name": "no-warning-comments",
        "description": "disallow specified warning terms in comments"
      },
      {
        "name": "no-with",
        "description": "disallow with statements"
      },
      {
        "name": "radix",
        "description": "enforce the consistent use of the radix argument when using parseInt()"
      },
      {
        "name": "vars-on-top",
        "description": "require var declarations be placed at the top of their containing scope"
      },
      {
        "name": "wrap-iife",
        "description": "require parentheses around immediate function invocations"
      },
      {
        "name": "yoda",
        "description": "require or disallow “Yoda” conditions"
      }
    ]
  },
  {
    "title": "Strict Mode",
    "rules": [
      {
        "name": "strict",
        "description": "require or disallow strict mode directives"
      }
    ]
  },
  {
    "title": "Variables",
    "rules": [
      {
        "name": "init-declarations",
        "description": "require or disallow initialization in var declarations"
      },
      {
        "name": "no-catch-shadow",
        "description": "disallow catch clause parameters from shadowing variables in the outer scope"
      },
      {
        "name": "no-delete-var",
        "description": "disallow deleting variables"
      },
      {
        "name": "no-label-var",
        "description": "disallow labels that share a name with a variable"
      },
      {
        "name": "no-restricted-globals",
        "description": "disallow specified global variables"
      },
      {
        "name": "no-shadow-restricted-names",
        "description": "disallow identifiers from shadowing restricted names"
      },
      {
        "name": "no-shadow",
        "description": "disallow var declarations from shadowing variables in the outer scope"
      },
      {
        "name": "no-undef-init",
        "description": "disallow initializing variables to undefined"
      },
      {
        "name": "no-undef",
        "description": "disallow the use of undeclared variables unless mentioned in /*global */ comments"
      },
      {
        "name": "no-undefined",
        "description": "disallow the use of undefined as an identifier"
      },
      {
        "name": "no-unused-vars",
        "description": "disallow unused variables"
      },
      {
        "name": "no-use-before-define",
        "description": "disallow the use of variables before they are defined"
      }
    ]
  },
  {
    "title": "Node.js and CommonJS",
    "rules": [
      {
        "name": "callback-return",
        "description": "require return statements after callbacks"
      },
      {
        "name": "global-require",
        "description": "require require() calls to be placed at top-level module scope"
      },
      {
        "name": "handle-callback-err",
        "description": "require error handling in callbacks"
      },
      {
        "name": "no-mixed-requires",
        "description": "disallow require calls to be mixed with regular var declarations"
      },
      {
        "name": "no-new-require",
        "description": "disallow new operators with calls to require"
      },
      {
        "name": "no-path-concat",
        "description": "disallow string concatenation with __dirname and __filename"
      },
      {
        "name": "no-process-env",
        "description": "disallow the use of process.env"
      },
      {
        "name": "no-process-exit",
        "description": "disallow the use of process.exit()"
      },
      {
        "name": "no-restricted-modules",
        "description": "disallow specified modules when loaded by require"
      },
      {
        "name": "no-restricted-properties",
        "description": "disallow certain properties on certain objects"
      },
      {
        "name": "no-sync",
        "description": "disallow synchronous methods"
      }
    ]
  },
  {
    "title": "Stylistic Issues",
    "rules": [
      {
        "name": "array-bracket-spacing",
        "description": "enforce consistent spacing inside array brackets"
      },
      {
        "name": "block-spacing",
        "description": "enforce consistent spacing inside single-line blocks"
      },
      {
        "name": "brace-style",
        "description": "enforce consistent brace style for blocks"
      },
      {
        "name": "camelcase",
        "description": "enforce camelcase naming convention"
      },
      {
        "name": "comma-dangle",
        "description": "require or disallow trailing commas"
      },
      {
        "name": "comma-spacing",
        "description": "enforce consistent spacing before and after commas"
      },
      {
        "name": "comma-style",
        "description": "enforce consistent comma style"
      },
      {
        "name": "computed-property-spacing",
        "description": "enforce consistent spacing inside computed property brackets"
      },
      {
        "name": "consistent-this",
        "description": "enforce consistent naming when capturing the current execution context"
      },
      {
        "name": "eol-last",
        "description": "enforce at least one newline at the end of files"
      },
      {
        "name": "func-call-spacing",
        "description": "require or disallow spacing between function identifiers and their invocations"
      },
      {
        "name": "func-names",
        "description": "require or disallow named function expressions"
      },
      {
        "name": "func-style",
        "description": "enforce the consistent use of either function declarations or expressions"
      },
      {
        "name": "id-blacklist",
        "description": "disallow specified identifiers"
      },
      {
        "name": "id-denylist",
        "description": "formerly id-blacklist; disallow specified identifiers"
      },
      {
        "name": "id-length",
        "description": "enforce minimum and maximum identifier lengths"
      },
      {
        "name": "id-match",
        "description": "require identifiers to match a specified regular expression"
      },
      {
        "name": "indent",
        "description": "enforce consistent indentation"
      },
      {
        "name": "jsx-quotes",
        "description": "enforce the consistent use of either double or single quotes in JSX attributes"
      },
      {
        "name": "key-spacing",
        "description": "enforce consistent spacing between keys and values in object literal properties"
      },
      {
        "name": "keyword-spacing",
        "description": "enforce consistent spacing before and after keywords"
      },
      {
        "name": "line-comment-position",
        "description": "enforce position of line comments"
      },
      {
        "name": "linebreak-style",
        "description": "enforce consistent linebreak style"
      },
      {
        "name": "lines-around-comment",
        "description": "require empty lines around comments"
      },
      {
        "name": "lines-around-directive",
        "description": "require or disallow newlines around directives"
      },
      {
        "name": "max-depth",
        "description": "enforce a maximum depth that blocks can be nested"
      },
      {
        "name": "max-len",
        "description": "enforce a maximum line length"
      },
      {
        "name": "max-lines",
        "description": "enforce a maximum number of lines per file"
      },
      {
        "name": "max-nested-callbacks",
        "description": "enforce a maximum depth that callbacks can be nested"
      },
      {
        "name": "max-params",
        "description": "enforce a maximum number of parameters in function definitions"
      },
      {
        "name": "max-statements-per-line",
        "description": "enforce a maximum number of statements allowed per line"
      },
      {
        "name": "max-statements",
        "description": "enforce a maximum number of statements allowed in function blocks"
      },
      {
        "name": "multiline-ternary",
        "description": "enforce newlines between operands of ternary expressions"
      },
      {
        "name": "new-cap",
        "description": "require constructor function names to begin with a capital letter"
      },
      {
        "name": "new-parens",
        "description": "require parentheses when invoking a constructor with no arguments"
      },
      {
        "name": "newline-after-var",
        "description": "require or disallow an empty line after var declarations"
      },
      {
        "name": "newline-before-return",
        "description": "require an empty line before return statements"
      },
      {
        "name": "newline-per-chained-call",
        "description": "require a newline after each call in a method chain"
      },
      {
        "name": "no-array-constructor",
        "description": "disallow Array constructors"
      },
      {
        "name": "no-bitwise",
        "description": "disallow bitwise operators"
      },
      {
        "name": "no-continue",
        "description": "disallow continue statements"
      },
      {
        "name": "no-inline-comments",
        "description": "disallow inline comments after code"
      },
      {
        "name": "no-lonely-if",
        "description": "disallow if statements as the only statement in else blocks"
      },
      {
        "name": "no-mixed-operators",
        "description": "disallow mixed binary operators"
      },
      {
        "name": "no-mixed-spaces-and-tabs",
        "description": "disallow mixed spaces and tabs for indentation"
      },
      {
        "name": "no-multiple-empty-lines",
        "description": "disallow multiple empty lines"
      },
      {
        "name": "no-negated-condition",
        "description": "disallow negated conditions"
      },
      {
        "name": "no-nested-ternary",
        "description": "disallow nested ternary expressions"
      },
      {
        "name": "no-new-object",
        "description": "disallow Object constructors"
      },
      {
        "name": "no-plusplus",
        "description": "disallow the unary operators ++ and --"
      },
      {
        "name": "no-restricted-syntax",
        "description": "disallow specified syntax"
      },
      {
        "name": "no-tabs",
        "description": "disallow tabs in file"
      },
      {
        "name": "no-ternary",
        "description": "disallow ternary operators"
      },
      {
        "name": "no-trailing-spaces",
        "description": "disallow trailing whitespace at the end of lines"
      },
      {
        "name": "no-underscore-dangle",
        "description": "disallow dangling underscores in identifiers"
      },
      {
        "name": "no-unneeded-ternary",
        "description": "disallow ternary operators when simpler alternatives exist"
      },
      {
        "name": "no-whitespace-before-property",
        "description": "disallow whitespace before properties"
      },
      {
        "name": "object-curly-newline",
        "description": "enforce consistent line breaks inside braces"
      },
      {
        "name": "object-curly-spacing",
        "description": "enforce consistent spacing inside braces"
      },
      {
        "name": "object-property-newline",
        "description": "enforce placing object properties on separate lines"
      },
      {
        "name": "one-var-declaration-per-line",
        "description": "require or disallow newlines around var declarations"
      },
      {
        "name": "one-var",
        "description": "enforce variables to be declared either together or separately in functions"
      },
      {
        "name": "operator-assignment",
        "description": "require or disallow assignment operator shorthand where possible"
      },
      {
        "name": "operator-linebreak",
        "description": "enforce consistent linebreak style for operators"
      },
      {
        "name": "padded-blocks",
        "description": "require or disallow padding within blocks"
      },
      {
        "name": "quote-props",
        "description": "require quotes around object literal property names"
      },
      {
        "name": "quotes",
        "description": "enforce the consistent use of either backticks, double, or single quotes"
      },
      {
        "name": "require-jsdoc",
        "description": "require JSDoc comments"
      },
      {
        "name": "semi-spacing",
        "description": "enforce consistent spacing before and after semicolons"
      },
      {
        "name": "semi",
        "description": "require or disallow semicolons instead of ASI"
      },
      {
        "name": "sort-keys",
        "description": "requires object keys to be sorted"
      },
      {
        "name": "sort-vars",
        "description": "require variables within the same declaration block to be sorted"
      },
      {
        "name": "space-before-blocks",
        "description": "enforce consistent spacing before blocks"
      },
      {
        "name": "space-before-function-paren",
        "description": "enforce consistent spacing before function definition opening parenthesis"
      },
      {
        "name": "space-in-parens",
        "description": "enforce consistent spacing inside parentheses"
      },
      {
        "name": "space-infix-ops",
        "description": "require spacing around operators"
      },
      {
        "name": "space-unary-ops",
        "description": "enforce consistent spacing before or after unary operators"
      },
      {
        "name": "spaced-comment",
        "description": "enforce consistent spacing after the // or /* in a comment"
      },
      {
        "name": "unicode-bom",
        "description": "require or disallow Unicode byte order mark (BOM)"
      },
      {
        "name": "wrap-regex",
        "description": "require parenthesis around regex literals"
      }
    ]
  },
  {
    "title": "ECMAScript 6",
    "rules": [
      {
        "name": "arrow-body-style",
        "description": "require braces around arrow function bodies"
      },
      {
        "name": "arrow-parens",
        "description": "require parentheses around arrow function arguments"
      },
      {
        "name": "arrow-spacing",
        "description": "enforce consistent spacing before and after the arrow in arrow functions"
      },
      {
        "name": "constructor-super",
        "description": "require super() calls in constructors"
      },
      {
        "name": "generator-star-spacing",
        "description": "enforce consistent spacing around * operators in generator functions"
      },
      {
        "name": "no-class-assign",
        "description": "disallow reassigning class members"
      },
      {
        "name": "no-confusing-arrow",
        "description": "disallow arrow functions where they could be confused with comparisons"
      },
      {
        "name": "no-const-assign",
        "description": "disallow reassigning const variables"
      },
      {
        "name": "no-dupe-class-members",
        "description": "disallow duplicate class members"
      },
      {
        "name": "no-duplicate-imports",
        "description": "disallow duplicate module imports"
      },
      {
        "name": "no-new-symbol",
        "description": "disallow new operators with the Symbol object"
      },
      {
        "name": "no-restricted-imports",
        "description": "disallow specified modules when loaded by import"
      },
      {
        "name": "no-this-before-super",
        "description": "disallow this/super before calling super() in constructors"
      },
      {
        "name": "no-useless-computed-key",
        "description": "disallow unnecessary computed property keys in object literals"
      },
      {
        "name": "no-useless-constructor",
        "description": "disallow unnecessary constructors"
      },
      {
        "name": "no-useless-rename",
        "description": "disallow renaming import, export, and destructured assignments to the same name"
      },
      {
        "name": "no-var",
        "description": "require let or const instead of var"
      },
      {
        "name": "object-shorthand",
        "description": "require or disallow method and property shorthand syntax for object literals"
      },
      {
        "name": "prefer-arrow-callback",
        "description": "require arrow functions as callbacks"
      },
      {
        "name": "prefer-const",
        "description": "require const declarations for variables that are never reassigned after declared"
      },
      {
        "name": "prefer-numeric-literals",
        "description": "disallow parseInt() in favor of binary, octal, and hexadecimal literals"
      },
      {
        "name": "prefer-reflect",
        "description": "require Reflect methods where applicable"
      },
      {
        "name": "prefer-rest-params",
        "description": "require rest parameters instead of arguments"
      },
      {
        "name": "prefer-spread",
        "description": "require spread operators instead of .apply()"
      },
      {
        "name": "prefer-template",
        "description": "require template literals instead of string concatenation"
      },
      {
        "name": "require-yield",
        "description": "require generator functions to contain yield"
      },
      {
        "name": "rest-spread-spacing",
        "description": "enforce spacing between rest and spread operators and their expressions"
      },
      {
        "name": "sort-imports",
        "description": "enforce sorted import declarations within modules"
      },
      {
        "name": "symbol-description",
        "description": "require symbol descriptions"
      },
      {
        "name": "template-curly-spacing",
        "description": "require or disallow spacing around embedded expressions of template strings"
      },
      {
        "name": "yield-star-spacing",
        "description": "require or disallow spacing around the * in yield* expressions"
      }
    ]
  }
]
